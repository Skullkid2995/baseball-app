'use client'

import { useEffect, useState } from 'react'
import { supabase } from '@/lib/supabase'

interface Team {
  id: string
  name: string
  city: string
  lineup?: string[]
  players?: Player[]
}

interface Player {
  id: string
  first_name: string
  last_name: string
  jersey_number: number
  positions: string[]
}

interface LineupEntry {
  playerId: string
  position: string
}

interface LineupSelectionProps {
  teamId?: string
  gameId?: string
  onClose: () => void
}

export default function LineupSelection({ teamId, gameId, onClose }: LineupSelectionProps) {
  const [teams, setTeams] = useState<Team[]>([])
  const [selectedTeam, setSelectedTeam] = useState<string | null>(null)
  const [lineupEntries, setLineupEntries] = useState<LineupEntry[]>([])
  const [hasDH, setHasDH] = useState(false)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)

  const fieldPositions = [
    'Lanzador (P)',
    'Receptor (C)', 
    'Primera Base (1B)',
    'Segunda Base (2B)',
    'Tercera Base (3B)',
    'Campo Corto (SS)',
    'Jardinero Izquierdo (LF)',
    'Jardinero Central (CF)',
    'Jardinero Derecho (RF)',
    'Bateador Designado (DH)'
  ]

  useEffect(() => {
    fetchTeams()
  }, [])

  useEffect(() => {
    if (teamId && teams.length > 0) {
      selectTeam(teamId)
    }
  }, [teamId, teams])

  async function fetchTeams() {
    try {
      const { data, error } = await supabase
        .from('teams')
        .select(`
          id,
          name,
          city,
          lineup,
          players (
            id,
            first_name,
            last_name,
            jersey_number,
            positions
          )
        `)
        .order('name')

      if (error) {
        console.error('Error fetching teams:', error)
      } else {
        setTeams(data || [])
      }
    } catch (err) {
      console.error('Failed to fetch teams:', err)
    } finally {
      setLoading(false)
    }
  }

  function selectTeam(teamId: string) {
    const team = teams.find(t => t.id === teamId)
    if (team) {
      setSelectedTeam(teamId)
      // Initialize lineup entries - create 9 or 10 entries based on DH
      const initialEntries: LineupEntry[] = []
      const maxEntries = hasDH ? 10 : 9
      for (let i = 0; i < maxEntries; i++) {
        initialEntries.push({ playerId: '', position: '' })
      }
      setLineupEntries(initialEntries)
    }
  }

  function updatePlayerInLineup(index: number, playerId: string) {
    const newEntries = [...lineupEntries]
    newEntries[index] = { ...newEntries[index], playerId }
    setLineupEntries(newEntries)
  }

  function updatePositionInLineup(index: number, position: string) {
    const newEntries = [...lineupEntries]
    newEntries[index] = { ...newEntries[index], position }
    setLineupEntries(newEntries)
    
    // Check if DH is selected to show/hide 10th row
    const hasDHSelected = position === 'Bateador Designado (DH)'
    setHasDH(hasDHSelected)
    
    // If DH is removed, hide 10th row
    if (!hasDHSelected && lineupEntries.length === 10) {
      const newEntriesWithoutDH = newEntries.slice(0, 9)
      setLineupEntries(newEntriesWithoutDH)
    }
  }

  function getAvailablePlayers() {
    if (!selectedTeam) return []
    const team = teams.find(t => t.id === selectedTeam)
    if (!team?.players) return []
    
    const usedPlayerIds = lineupEntries.map(entry => entry.playerId).filter(id => id !== '')
    return team.players.filter(player => !usedPlayerIds.includes(player.id))
  }

  async function saveLineup() {
    if (!selectedTeam) return

    // Validate that all required positions are filled
    const requiredEntries = hasDH ? 10 : 9
    const filledEntries = lineupEntries.slice(0, requiredEntries).filter(entry => 
      entry.playerId && entry.position
    )

    if (filledEntries.length !== requiredEntries) {
      alert(`Por favor complete todos los ${requiredEntries} posiciones requeridas`)
      return
    }

    setSaving(true)
    try {
      // Extract player IDs in batting order
      const playerIds = lineupEntries.slice(0, requiredEntries).map(entry => entry.playerId)
      
      // Update team lineup
      const { error: teamError } = await supabase
        .from('teams')
        .update({ lineup: playerIds })
        .eq('id', selectedTeam)

      if (teamError) {
        console.error('Error saving lineup:', teamError)
        alert('Error al guardar la alineación')
        return
      }

      // Update game to link to this team (only if gameId is provided)
      if (gameId) {
        const { error: gameError } = await supabase
          .from('games')
          .update({ team_id: selectedTeam })
          .eq('id', gameId)

        if (gameError) {
          console.error('Error linking game to team:', gameError)
          alert('Error al vincular el juego con el equipo')
          return
        }
      }

      alert('Alineación guardada exitosamente')
      onClose()
    } catch (err) {
      console.error('Error saving lineup:', err)
      alert('Error al guardar la alineación')
    } finally {
      setSaving(false)
    }
  }

  function getPlayerName(playerId: string) {
    if (!selectedTeam) return ''
    const team = teams.find(t => t.id === selectedTeam)
    const player = team?.players?.find(p => p.id === playerId)
    return player ? `${player.first_name} ${player.last_name} #${player.jersey_number}` : ''
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">Cargando equipos...</span>
      </div>
    )
  }

  const currentTeam = selectedTeam ? teams.find(t => t.id === selectedTeam) : null
  const availablePlayers = getAvailablePlayers()
  const maxRows = hasDH ? 10 : 9

  return (
    <div className="space-y-6">
      {/* Team Selection - Only show if no teamId provided */}
      {!teamId && (
        <div>
          <h4 className="text-md font-semibold text-gray-800 mb-3">Seleccionar Equipo:</h4>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {teams.map((team) => (
              <button
                key={team.id}
                onClick={() => selectTeam(team.id)}
                className={`p-3 border rounded-lg text-left transition-colors ${
                  selectedTeam === team.id
                    ? 'border-blue-500 bg-blue-50 text-blue-800'
                    : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                }`}
              >
                <div className="font-medium">{team.name}</div>
                <div className="text-sm text-gray-600">{team.city}</div>
                <div className="text-xs text-gray-500">
                  {team.players?.length || 0} jugadores
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Lineup Grid */}
      {currentTeam && (
        <div className="space-y-4">
          <h4 className="text-md font-semibold text-gray-800">
            Alineación para {currentTeam.name}
          </h4>

          {/* Grid Table */}
          <div className="overflow-x-auto">
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                    #
                  </th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                    Jugador
                  </th>
                  <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                    Posición
                  </th>
                </tr>
              </thead>
              <tbody>
                {Array.from({ length: maxRows }, (_, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    {/* Batting Order Number */}
                    <td className="border border-gray-300 px-3 py-2 text-center font-medium">
                      {index + 1}
                    </td>
                    
                    {/* Player Selection */}
                    <td className="border border-gray-300 px-3 py-2">
                      <select
                        value={lineupEntries[index]?.playerId || ''}
                        onChange={(e) => updatePlayerInLineup(index, e.target.value)}
                        className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="">Seleccionar jugador...</option>
                        {availablePlayers.map((player) => (
                          <option key={player.id} value={player.id}>
                            {player.first_name} {player.last_name} #{player.jersey_number}
                          </option>
                        ))}
                        {lineupEntries[index]?.playerId && (
                          <option value={lineupEntries[index].playerId}>
                            {getPlayerName(lineupEntries[index].playerId)}
                          </option>
                        )}
                      </select>
                    </td>
                    
                    {/* Position Selection */}
                    <td className="border border-gray-300 px-3 py-2">
                      <select
                        value={lineupEntries[index]?.position || ''}
                        onChange={(e) => updatePositionInLineup(index, e.target.value)}
                        className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="">Seleccionar posición...</option>
                        {fieldPositions.map((position) => (
                          <option key={position} value={position}>
                            {position}
                          </option>
                        ))}
                      </select>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* DH Info */}
          {hasDH && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-sm text-blue-800">
                <strong>Bateador Designado (DH)</strong> seleccionado. Se habilitó la fila 10.
              </p>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-end space-x-3 pt-4 border-t">
            <button
              onClick={onClose}
              className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              onClick={saveLineup}
              disabled={saving}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {saving ? 'Guardando...' : 'Guardar Alineación'}
            </button>
          </div>
        </div>
      )}
    </div>
  )
}