'use client'

import { useRef, useEffect, useState } from 'react'

interface DiamondCanvasProps {
  onSave: (notation: string, baseRunners?: { first: boolean, second: boolean, third: boolean, home: boolean }, fieldLocationData?: any, baseRunnerOuts?: { first: boolean, second: boolean, third: boolean, home: boolean }, baseRunnerOutTypes?: { first: string, second: string, third: string, home: string }) => void
  onClose: () => void
  playerName: string
  inning: number
  existingAtBat?: any // For editing existing at-bats
}

export default function DiamondCanvas({ onSave, onClose, playerName, inning, existingAtBat }: DiamondCanvasProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  // Drawing state removed - only base selection functionality
  const [count, setCount] = useState({ strikes: 0, balls: 0, fouls: 0 })
  const [pitchCount, setPitchCount] = useState(0)
  const [selectedBase, setSelectedBase] = useState<'first' | 'second' | 'third' | 'home' | null>(null)
  const [baseRunners, setBaseRunners] = useState<{first: boolean, second: boolean, third: boolean, home: boolean}>({
    first: false,
    second: false,
    third: false,
    home: false
  })
  const [runScored, setRunScored] = useState(false)
  const [handwritingInput, setHandwritingInput] = useState('')
  const [showFieldSelection, setShowFieldSelection] = useState(false)
  const [selectedFieldArea, setSelectedFieldArea] = useState<string | null>(null)
  const [showOutcomeSelection, setShowOutcomeSelection] = useState(false)
  const [fieldLocationData, setFieldLocationData] = useState<{
    fieldArea: string
    fieldZone: string
    hitDistance: string
    hitAngle: string
  } | null>(null)
  const [isOut, setIsOut] = useState(false)
  const [baseRunnerOuts, setBaseRunnerOuts] = useState<{first: boolean, second: boolean, third: boolean, home: boolean}>({
    first: false,
    second: false,
    third: false,
    home: false
  })
  const [showOutTypeModal, setShowOutTypeModal] = useState(false)
  const [selectedOutType, setSelectedOutType] = useState<string | null>(null)
  const [baseRunnerOutTypes, setBaseRunnerOutTypes] = useState<{first: string, second: string, third: string, home: string}>({
    first: '',
    second: '',
    third: '',
    home: ''
  })
  const [showStrikeoutConfirm, setShowStrikeoutConfirm] = useState(false)
  const [showWalkConfirm, setShowWalkConfirm] = useState(false)
  const [pendingCount, setPendingCount] = useState<{strikes: number, balls: number} | null>(null)
  const [isWalk, setIsWalk] = useState(false)

  // Load existing at-bat data when component mounts or existingAtBat changes
  useEffect(() => {
    if (existingAtBat) {
      console.log('=== LOADING EXISTING AT-BAT ===')
      console.log('Full existingAtBat object:', existingAtBat)
      console.log('existingAtBat.base_runners:', existingAtBat.base_runners)
      console.log('existingAtBat.result:', existingAtBat.result)
      console.log('================================')
      
      // Load base runners from existing at-bat
      if (existingAtBat.base_runners) {
        setBaseRunners(existingAtBat.base_runners)
        console.log('Loaded base runners:', existingAtBat.base_runners)
        console.log('Setting baseRunners state to:', existingAtBat.base_runners)
        
        // Auto-select the first base that has a runner for editing
        if (existingAtBat.base_runners.first) {
          setSelectedBase('first')
          console.log('Auto-selected first base')
        } else if (existingAtBat.base_runners.second) {
          setSelectedBase('second')
          console.log('Auto-selected second base')
        } else if (existingAtBat.base_runners.third) {
          setSelectedBase('third')
          console.log('Auto-selected third base')
        } else if (existingAtBat.base_runners.home) {
          setSelectedBase('home')
          console.log('Auto-selected home base')
        }
      } else {
        console.log('No base_runners found in existingAtBat')
      }
      
      // Load notation if it exists (prefer notation field, fallback to result)
      if (existingAtBat.notation) {
        setHandwritingInput(existingAtBat.notation)
        console.log('Loaded notation:', existingAtBat.notation)
      } else if (existingAtBat.result) {
        setHandwritingInput(existingAtBat.result)
        console.log('Loaded result as notation:', existingAtBat.result)
      }
      
      // Set run scored if home is true
      if (existingAtBat.base_runners?.home) {
        setRunScored(true)
        console.log('Run was scored in this at-bat')
      }
      
      // Load field location data if available
      if (existingAtBat.field_area || existingAtBat.field_zone) {
        setFieldLocationData({
          fieldArea: existingAtBat.field_area || '',
          fieldZone: existingAtBat.field_zone || '',
          hitDistance: existingAtBat.hit_distance || '',
          hitAngle: existingAtBat.hit_angle || ''
        })
        console.log('Loaded field location data:', {
          fieldArea: existingAtBat.field_area,
          fieldZone: existingAtBat.field_zone,
          hitDistance: existingAtBat.hit_distance,
          hitAngle: existingAtBat.hit_angle
        })
      }
      
      // Check if result is an out
      const outResults = ['strikeout', 'ground_out', 'fly_out', 'line_out', 'pop_out', 'error']
      setIsOut(outResults.includes(existingAtBat.result))
      
      // Load base runner outs if available
      if (existingAtBat.base_runner_outs) {
        setBaseRunnerOuts(existingAtBat.base_runner_outs)
        console.log('Loaded base runner outs:', existingAtBat.base_runner_outs)
      }
    } else {
      console.log('No existing at-bat, resetting state')
      // Reset state for new at-bat
      setBaseRunners({ first: false, second: false, third: false, home: false })
      setHandwritingInput('')
      setRunScored(false)
      setSelectedBase(null)
      setIsOut(false)
      setBaseRunnerOuts({ first: false, second: false, third: false, home: false })
      setBaseRunnerOutTypes({ first: '', second: '', third: '', home: '' })
    }
  }, [existingAtBat])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    console.log('Canvas redrawing, selectedBase:', selectedBase, 'baseRunners:', baseRunners)

    // Set up canvas
    ctx.lineCap = 'round'
    ctx.lineJoin = 'round'
    ctx.lineWidth = 4
    ctx.strokeStyle = '#000000'

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    // Draw baseball field design
      drawBaseballField(ctx, canvas.width, canvas.height, baseRunners, runScored)

    // Draw count in top right corner
    ctx.fillStyle = '#000000'
    ctx.font = 'bold 20px Arial'
    ctx.textAlign = 'right'
    ctx.fillText(`${count.balls}-${count.strikes}`, canvas.width - 15, 30)
    
    // Draw pitch count underneath
    ctx.font = 'bold 14px Arial'
    ctx.fillText(`Pitches: ${pitchCount}`, canvas.width - 15, 55)
    
    // Draw foul count if any
    if (count.fouls > 0) {
      ctx.font = 'bold 12px Arial'
      ctx.fillText(`Fouls: ${count.fouls}`, canvas.width - 15, 75)
    }

    // Reset stroke style for drawing
    ctx.strokeStyle = '#000000'
    ctx.lineWidth = 4
  }, [count, pitchCount, baseRunners, runScored, selectedBase])

  function drawBaseballField(ctx: CanvasRenderingContext2D, width: number, height: number, baseRunners: {first: boolean, second: boolean, third: boolean, home: boolean}, runScored: boolean = false) {
    // Use more of the canvas for the field - make it bigger
    const fieldWidth = Math.min(width - 120, height - 80) // More space for the field
    const fieldHeight = fieldWidth * 1.2 // Taller field to show outfield
    
    const centerX = width / 2
    const centerY = height / 2
    
    // Position field in center
    const fieldX = centerX - fieldWidth / 2
    const fieldY = centerY - fieldHeight / 2
    
    // Draw outfield background (grass)
    ctx.fillStyle = '#228B22' // Forest green for grass
    ctx.fillRect(fieldX, fieldY, fieldWidth, fieldHeight)
    
    // Draw foul lines from home plate to outfield
    const homePlateX = centerX
    const homePlateY = centerY + fieldHeight * 0.3 // Home plate position
    
    // Foul line dimensions
    const foulLineLength = fieldWidth * 0.4
    const leftFoulLineX = homePlateX - foulLineLength * 0.7
    const leftFoulLineY = homePlateY - foulLineLength * 0.7
    const rightFoulLineX = homePlateX + foulLineLength * 0.7
    const rightFoulLineY = homePlateY - foulLineLength * 0.7
    
    // Draw foul lines
    ctx.strokeStyle = '#FFFFFF'
    ctx.lineWidth = 3
    ctx.beginPath()
    // Left foul line
    ctx.moveTo(homePlateX, homePlateY)
    ctx.lineTo(leftFoulLineX, leftFoulLineY)
    // Right foul line
    ctx.moveTo(homePlateX, homePlateY)
    ctx.lineTo(rightFoulLineX, rightFoulLineY)
    ctx.stroke()
    
    // Draw infield dirt area (diamond shape)
    const diamondSize = fieldWidth * 0.4 // Smaller diamond to fit with outfield
    const diamondX = centerX - diamondSize / 2
    const diamondY = homePlateY - diamondSize / 2
    
    // Fill diamond with blue if run scored, otherwise dirt color
    ctx.fillStyle = runScored ? '#1E3A8A' : '#DEB887' // Dodgers blue or light orange/tan dirt color
    ctx.beginPath()
    ctx.moveTo(homePlateX, homePlateY) // Home plate (bottom)
    ctx.lineTo(centerX + diamondSize / 2, diamondY) // First base (right)
    ctx.lineTo(centerX, diamondY - diamondSize / 2) // Second base (top)
    ctx.lineTo(centerX - diamondSize / 2, diamondY) // Third base (left)
    ctx.closePath()
    ctx.fill()
    
    // Draw base paths
    ctx.strokeStyle = '#DEB887'
    ctx.lineWidth = 6
    ctx.beginPath()
    // Home to first
    ctx.moveTo(homePlateX, homePlateY)
    ctx.lineTo(centerX + diamondSize / 2, diamondY)
    // First to second
    ctx.moveTo(centerX + diamondSize / 2, diamondY)
    ctx.lineTo(centerX, diamondY - diamondSize / 2)
    // Second to third
    ctx.moveTo(centerX, diamondY - diamondSize / 2)
    ctx.lineTo(centerX - diamondSize / 2, diamondY)
    // Third to home
    ctx.moveTo(centerX - diamondSize / 2, diamondY)
    ctx.lineTo(homePlateX, homePlateY)
    ctx.stroke()
    
    // No base runner lines - just highlight the selected base
    
    // Draw pitcher's mound
    const moundRadius = diamondSize * 0.08
    ctx.fillStyle = '#DEB887'
    ctx.beginPath()
    ctx.arc(centerX, diamondY, moundRadius, 0, 2 * Math.PI)
    ctx.fill()
    
    // Draw pitcher's rubber (white line)
    ctx.strokeStyle = '#FFFFFF'
    ctx.lineWidth = 3
    ctx.beginPath()
    ctx.moveTo(centerX - moundRadius * 0.6, diamondY)
    ctx.lineTo(centerX + moundRadius * 0.6, diamondY)
    ctx.stroke()
    
    // Draw home plate (white pentagon)
    const homePlateSize = diamondSize * 0.12
    ctx.fillStyle = '#FFFFFF'
    ctx.strokeStyle = '#000000'
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.moveTo(homePlateX, homePlateY + homePlateSize)
    ctx.lineTo(homePlateX + homePlateSize / 2, homePlateY)
    ctx.lineTo(homePlateX + homePlateSize, homePlateY + homePlateSize / 2)
    ctx.lineTo(homePlateX + homePlateSize / 2, homePlateY + homePlateSize)
    ctx.lineTo(homePlateX - homePlateSize / 2, homePlateY + homePlateSize)
    ctx.lineTo(homePlateX - homePlateSize, homePlateY + homePlateSize / 2)
    ctx.lineTo(homePlateX - homePlateSize / 2, homePlateY)
    ctx.closePath()
    ctx.fill()
    ctx.stroke()
    
    // Draw bases (white squares with runner status)
    const baseSize = diamondSize * 0.18
    ctx.fillStyle = '#FFFFFF'
    ctx.strokeStyle = '#000000'
    ctx.lineWidth = 2
    
    // First base (right) - with selection indicator
    ctx.fillRect(centerX + diamondSize / 2 - baseSize / 2, diamondY - baseSize / 2, baseSize, baseSize)
    ctx.strokeRect(centerX + diamondSize / 2 - baseSize / 2, diamondY - baseSize / 2, baseSize, baseSize)
    if (selectedBase === 'first' || baseRunners.first) {
      console.log('Drawing yellow first base - SELECTED or RUNNER')
      ctx.fillStyle = '#FCD34D' // Yellow for selected base or runner
      ctx.fillRect(centerX + diamondSize / 2 - baseSize / 2 + 1, diamondY - baseSize / 2 + 1, baseSize - 2, baseSize - 2)
    }
    
    // Second base (top) - with selection indicator
    ctx.fillStyle = '#FFFFFF'
    ctx.fillRect(centerX - baseSize / 2, diamondY - diamondSize / 2 - baseSize / 2, baseSize, baseSize)
    ctx.strokeRect(centerX - baseSize / 2, diamondY - diamondSize / 2 - baseSize / 2, baseSize, baseSize)
    if (selectedBase === 'second' || baseRunners.second) {
      ctx.fillStyle = '#FCD34D' // Yellow for selected base or runner
      ctx.fillRect(centerX - baseSize / 2 + 1, diamondY - diamondSize / 2 - baseSize / 2 + 1, baseSize - 2, baseSize - 2)
    }
    
    // Third base (left) - with selection indicator
    ctx.fillStyle = '#FFFFFF'
    ctx.fillRect(centerX - diamondSize / 2 - baseSize / 2, diamondY - baseSize / 2, baseSize, baseSize)
    ctx.strokeRect(centerX - diamondSize / 2 - baseSize / 2, diamondY - baseSize / 2, baseSize, baseSize)
    if (selectedBase === 'third' || baseRunners.third) {
      ctx.fillStyle = '#FCD34D' // Yellow for selected base or runner
      ctx.fillRect(centerX - diamondSize / 2 - baseSize / 2 + 1, diamondY - baseSize / 2 + 1, baseSize - 2, baseSize - 2)
    }
    
    // Home plate - with selection indicator
    if (selectedBase === 'home' || baseRunners.home) {
      ctx.fillStyle = '#FCD34D' // Yellow for selected home plate or runner
      ctx.beginPath()
      ctx.moveTo(centerX, diamondY + diamondSize / 2 + homePlateSize)
      ctx.lineTo(centerX + homePlateSize / 2, diamondY + diamondSize / 2)
      ctx.lineTo(centerX + homePlateSize, diamondY + diamondSize / 2 + homePlateSize / 2)
      ctx.lineTo(centerX + homePlateSize / 2, diamondY + diamondSize / 2 + homePlateSize)
      ctx.lineTo(centerX - homePlateSize / 2, diamondY + diamondSize / 2 + homePlateSize)
      ctx.lineTo(centerX - homePlateSize, diamondY + diamondSize / 2 + homePlateSize / 2)
      ctx.lineTo(centerX - homePlateSize / 2, diamondY + diamondSize / 2)
      ctx.closePath()
      ctx.fill()
    }
    
    // No field border - just the diamond
  }

  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
    console.log('🎯 Canvas clicked!')
    const canvas = canvasRef.current
    if (!canvas) {
      console.log('❌ No canvas ref')
      return
    }
    
    // Don't allow base selection if it's an out
    if (isOut) {
      console.log('❌ Click ignored - isOut is true')
      return
    }

    const rect = canvas.getBoundingClientRect()
    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY
    
    // Account for canvas scaling - canvas is 600x600 but may be scaled by CSS
    const scaleX = canvas.width / rect.width
    const scaleY = canvas.height / rect.height
    
    const x = (clientX - rect.left) * scaleX
    const y = (clientY - rect.top) * scaleY
    
    console.log('Click coordinates:', x, y)
    
    // Check if click is on a base - Use EXACT same coordinates as drawing function
    const centerX = canvas.width / 2
    const centerY = canvas.height / 2
    
    // Use same field dimensions as drawing function
    const fieldWidth = Math.min(canvas.width - 120, canvas.height - 80)
    const fieldHeight = fieldWidth * 1.2
    const diamondSize = fieldWidth * 0.4 // Same as drawing function
    const baseSize = diamondSize * 0.18 // Same as drawing function
    const homePlateSize = diamondSize * 0.12 // Same as drawing function
    
    // Use EXACT same positioning as drawing function
    const homePlateX = centerX
    const homePlateY = centerY + fieldHeight * 0.3
    const diamondX = centerX - diamondSize / 2
    const diamondY = homePlateY - diamondSize / 2
    
    console.log('=== BASE CLICK DEBUG ===')
    console.log('Raw click coordinates:', clientX - rect.left, clientY - rect.top)
    console.log('Scaled click coordinates:', x, y)
    console.log('Canvas dimensions:', canvas.width, 'x', canvas.height)
    console.log('Canvas rect:', rect.width, 'x', rect.height)
    console.log('Scale factors:', scaleX, scaleY)
    console.log('CenterX:', centerX, 'CenterY:', centerY)
    console.log('DiamondSize:', diamondSize, 'BaseSize:', baseSize, 'HomePlateSize:', homePlateSize)
    console.log('DiamondY:', diamondY)
    console.log('FieldWidth:', fieldWidth, 'FieldHeight:', fieldHeight)
    
    // Check if click is in diamond area
    const diamondLeft = centerX - diamondSize / 2
    const diamondRight = centerX + diamondSize / 2
    const diamondTop = diamondY - diamondSize / 2
    const diamondBottom = diamondY + diamondSize / 2
    console.log('Diamond bounds:', diamondLeft, diamondTop, 'to', diamondRight, diamondBottom)
    console.log('Click in diamond area:', x >= diamondLeft && x <= diamondRight && y >= diamondTop && y <= diamondBottom)
    
    console.log('Base positions:')
    console.log('1st base:', centerX + diamondSize / 2 - baseSize / 2, diamondY - baseSize / 2, 'to', centerX + diamondSize / 2 + baseSize / 2, diamondY + baseSize / 2)
    console.log('2nd base:', centerX - baseSize / 2, diamondY - diamondSize / 2 - baseSize / 2, 'to', centerX + baseSize / 2, diamondY - diamondSize / 2 + baseSize / 2)
    console.log('3rd base:', centerX - diamondSize / 2 - baseSize / 2, diamondY - baseSize / 2, 'to', centerX - diamondSize / 2 + baseSize / 2, diamondY + baseSize / 2)
    console.log('Home plate:', centerX - homePlateSize, diamondY + diamondSize / 2, 'to', centerX + homePlateSize, diamondY + diamondSize / 2 + homePlateSize)
    
    // First base (right) - Exact coordinates from drawing function
    if (x >= centerX + diamondSize / 2 - baseSize / 2 && 
        x <= centerX + diamondSize / 2 + baseSize / 2 &&
        y >= diamondY - baseSize / 2 && 
        y <= diamondY + baseSize / 2) {
      console.log('✅ Clicked first base!')
      setSelectedBase('first')
      setBaseRunners({ first: true, second: false, third: false, home: false })
      return
    }
    
    // Second base (top) - Exact coordinates from drawing function
    if (x >= centerX - baseSize / 2 && 
        x <= centerX + baseSize / 2 &&
        y >= diamondY - diamondSize / 2 - baseSize / 2 && 
        y <= diamondY - diamondSize / 2 + baseSize / 2) {
      console.log('✅ Clicked second base!')
      setSelectedBase('second')
      setBaseRunners({ first: false, second: true, third: false, home: false })
      return
    }
    
    // Third base (left) - Exact coordinates from drawing function
    if (x >= centerX - diamondSize / 2 - baseSize / 2 && 
        x <= centerX - diamondSize / 2 + baseSize / 2 &&
        y >= diamondY - baseSize / 2 && 
        y <= diamondY + baseSize / 2) {
      console.log('✅ Clicked third base!')
      setSelectedBase('third')
      setBaseRunners({ first: false, second: false, third: true, home: false })
      return
    }
    
    // Home plate - Exact coordinates from drawing function
    if (x >= homePlateX - homePlateSize && 
        x <= homePlateX + homePlateSize &&
        y >= homePlateY && 
        y <= homePlateY + homePlateSize) {
      console.log('✅ Clicked home plate!')
      setSelectedBase('home')
      setBaseRunners({ first: false, second: false, third: false, home: true })
      return
    }
    
      // No drawing functionality - only base selection
      console.log('❌ Click not on any base')
  }

  // Drawing functionality removed - only base selection is available

  const clearCanvas = () => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    // Draw baseball field design
      drawBaseballField(ctx, canvas.width, canvas.height, baseRunners, runScored)

    // Draw count in top right corner
    ctx.fillStyle = '#000000'
    ctx.font = 'bold 20px Arial'
    ctx.textAlign = 'right'
    ctx.fillText(`${count.balls}-${count.strikes}`, canvas.width - 15, 30)
    
    // Draw pitch count underneath
    ctx.font = 'bold 14px Arial'
    ctx.fillText(`Pitches: ${pitchCount}`, canvas.width - 15, 55)
    
    // Draw foul count if any
    if (count.fouls > 0) {
      ctx.font = 'bold 12px Arial'
      ctx.fillText(`Fouls: ${count.fouls}`, canvas.width - 15, 75)
    }

    // Canvas cleared and redrawn
  }

  const addStrike = () => {
    setCount(prev => {
      const newStrikes = Math.min(prev.strikes + 1, 3)
      
      // Show confirmation dialog when 3 strikes
      if (newStrikes === 3) {
        setPendingCount({ strikes: newStrikes, balls: prev.balls })
        setShowStrikeoutConfirm(true)
        return prev // Don't update count yet, wait for confirmation
      }
      
      return { ...prev, strikes: newStrikes }
    })
    setPitchCount(prev => prev + 1)
  }

  const addBall = () => {
    setCount(prev => {
      const newBalls = Math.min(prev.balls + 1, 4)
      
      // Show confirmation dialog when 4 balls
      if (newBalls === 4) {
        setPendingCount({ strikes: prev.strikes, balls: newBalls })
        setShowWalkConfirm(true)
        return prev // Don't update count yet, wait for confirmation
      }
      
      return { ...prev, balls: newBalls }
    })
    setPitchCount(prev => prev + 1)
  }

  const addFoul = () => {
    setCount(prev => {
      const newFouls = prev.fouls + 1
      // Foul = strike, but if already 2 strikes, count stays the same
      const newStrikes = prev.strikes < 2 ? prev.strikes + 1 : prev.strikes
      return { ...prev, strikes: newStrikes, fouls: newFouls }
    })
    setPitchCount(prev => prev + 1)
  }

  const resetCount = () => {
    setCount({ strikes: 0, balls: 0, fouls: 0 })
    setPitchCount(0)
  }

  const handleAutoStrikeout = () => {
    console.log('=== AUTO STRIKEOUT ===')
    console.log('Count reached 3 strikes - automatic strikeout!')
    console.log('======================')
    
    // Set as out
    setIsOut(true)
    
    // Set the notation to indicate strikeout
    setHandwritingInput('K')
    
    // Show strikeout notification
    alert('¡Ponche! (3 strikes)')
  }

  const handleAutoWalk = () => {
    console.log('=== AUTO WALK ===')
    console.log('Count reached 4 balls - automatic walk!')
    console.log('Placing runner on first base')
    console.log('=========================')
    
    // Place runner on first base (clear all others for single base selection)
    setBaseRunners({ first: true, second: false, third: false, home: false })
    
    // Set the notation to indicate walk
    setHandwritingInput('BB')
    
    // Lock the interface for walk - only allow runner advancement, carrera, and out buttons
    setIsWalk(true)
    
    // Show walk notification
    alert('¡Base por bolas! (4 bolas) - Corredor colocado en primera base')
  }

  const confirmStrikeout = () => {
    if (pendingCount) {
      setCount(pendingCount)
      setShowStrikeoutConfirm(false)
      setPendingCount(null)
      setTimeout(() => {
        handleAutoStrikeout()
      }, 500)
    }
  }

  const cancelStrikeout = () => {
    setShowStrikeoutConfirm(false)
    setPendingCount(null)
    // Count remains unchanged (stays at 2 strikes)
  }

  const confirmWalk = () => {
    if (pendingCount) {
      setCount(pendingCount)
      setShowWalkConfirm(false)
      setPendingCount(null)
      setTimeout(() => {
        handleAutoWalk()
      }, 500)
    }
  }

  const cancelWalk = () => {
    setShowWalkConfirm(false)
    setPendingCount(null)
    // Count remains unchanged (stays at 3 balls)
  }

  const getLeftFieldArea = (x: number, y: number): string => {
    // Left field precision mapping
    const depth = y < 20 ? 'DEEP' : y < 35 ? 'MEDIUM' : 'SHALLOW'
    const angle = x < 10 ? 'LINE' : x < 20 ? 'GAP' : 'CENTER'
    return `LEFT_FIELD_${depth}_${angle}`
  }

  const getCenterFieldArea = (x: number, y: number): string => {
    // Center field precision mapping
    const depth = y < 20 ? 'DEEP' : y < 35 ? 'MEDIUM' : 'SHALLOW'
    const angle = x < 10 ? 'LEFT_GAP' : x < 20 ? 'CENTER' : 'RIGHT_GAP'
    return `CENTER_FIELD_${depth}_${angle}`
  }

  const getRightFieldArea = (x: number, y: number): string => {
    // Right field precision mapping
    const depth = y < 20 ? 'DEEP' : y < 35 ? 'MEDIUM' : 'SHALLOW'
    const angle = x < 10 ? 'CENTER' : x < 20 ? 'GAP' : 'LINE'
    return `RIGHT_FIELD_${depth}_${angle}`
  }


  const handleFieldClick = (e: React.MouseEvent<HTMLCanvasElement>) => {
    console.log('Canvas field clicked')
    
    const canvas = canvasRef.current
    if (!canvas) return
    
    const rect = canvas.getBoundingClientRect()
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top
    
    // Determine field area based on click coordinates
    const centerX = canvas.width / 2
    const centerY = canvas.height / 2
    const fieldWidth = Math.min(canvas.width - 120, canvas.height - 80)
    const fieldHeight = fieldWidth * 1.2
    const diamondSize = fieldWidth * 0.4
    const homePlateY = centerY + fieldHeight * 0.3
    
    let fieldArea = 'INFIELD'
    
    // Check if click is in outfield
    if (y < homePlateY - diamondSize / 2) {
      if (x < centerX - diamondSize / 4) {
        fieldArea = 'LEFT_FIELD'
      } else if (x > centerX + diamondSize / 4) {
        fieldArea = 'RIGHT_FIELD'
      } else {
        fieldArea = 'CENTER_FIELD'
      }
      
      // Check if it's deep
      if (y < homePlateY - diamondSize) {
        fieldArea = 'DEEP_' + fieldArea
      }
    }
    
    console.log('Field area determined:', fieldArea)
    
    // Determine field zone and hit characteristics
    let fieldZone = fieldArea
    let hitDistance = 'MEDIUM'
    let hitAngle = 'CENTER'
    
    // Determine distance based on field area
    if (fieldArea.includes('DEEP_')) {
      hitDistance = 'DEEP'
    } else if (fieldArea.includes('INFIELD') || fieldArea.includes('FOUL')) {
      hitDistance = 'SHORT'
    }
    
    // Determine angle based on field area
    if (fieldArea.includes('LEFT_')) {
      hitAngle = 'PULL'
    } else if (fieldArea.includes('RIGHT_')) {
      hitAngle = 'OPPO'
    }
    
    // Set field location data
    setFieldLocationData({
      fieldArea: fieldArea,
      fieldZone: fieldZone,
      hitDistance: hitDistance,
      hitAngle: hitAngle
    })
    
    setSelectedFieldArea(selectedFieldArea + '_' + fieldArea)
    setShowFieldSelection(false)
    setShowOutcomeSelection(true)
  }

  const saveDrawing = () => {
    // If run was scored, set home to true in baseRunners
    const finalBaseRunners = runScored ? { first: false, second: false, third: false, home: true } : baseRunners
    
    console.log('=== SAVING AT-BAT ===')
    console.log('handwritingInput:', handwritingInput)
    console.log('finalBaseRunners:', finalBaseRunners)
    console.log('runScored:', runScored)
    console.log('fieldLocationData:', fieldLocationData)
    console.log('===================')
    
    onSave(handwritingInput || 'DRAWING_SAVED', finalBaseRunners, fieldLocationData, baseRunnerOuts, baseRunnerOutTypes)
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-2 sm:p-4">
      <div className="bg-white rounded-lg w-full max-w-4xl h-[95vh] sm:h-[700px] flex flex-col">
        {/* Header */}
        <div className="p-2 sm:p-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h3 className="text-lg sm:text-xl font-bold text-gray-800">
              Anotar Turno al Bat - {playerName} (Entrada {inning})
            </h3>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 text-xl sm:text-2xl"
            >
              ×
            </button>
          </div>
          <p className="text-xs sm:text-sm text-gray-600 mt-1">
            Toca las bases para seleccionar la posición del corredor. Usa los botones para seleccionar el resultado del turno al bat.
          </p>
        </div>

        {/* Canvas Area */}
        <div className="flex-1 p-2 sm:p-6 flex items-center justify-center bg-gray-50 overflow-auto">
          <div className="relative w-full h-full flex items-center justify-center">
            <canvas
              ref={canvasRef}
              width={600}
              height={600}
              className="border border-gray-300 rounded-lg bg-white cursor-pointer max-w-full max-h-full object-contain"
              onClick={handleCanvasClick}
            />
            
    {/* Hit/Out Buttons - Top Center (only show for new at-bats, not out, and not walk) */}
    {!existingAtBat && !isOut && !isWalk && (
      <div className="absolute top-4 left-1/2 transform -translate-x-1/2 flex space-x-6">
        <button
          onClick={() => {
            setShowFieldSelection(true)
            setSelectedFieldArea('HIT')
          }}
          className="bg-green-600 text-white px-4 py-2 rounded-lg text-xs font-bold hover:bg-green-700 active:bg-green-800 shadow-lg"
        >
          Hit
        </button>
        <button
          onClick={() => {
            setShowFieldSelection(true)
            setSelectedFieldArea('OUT')
            setIsOut(true) // Mark as out when Out button is clicked
          }}
          className="bg-red-600 text-white px-4 py-2 rounded-lg text-xs font-bold hover:bg-red-700 active:bg-red-800 shadow-lg"
        >
          Out
        </button>
      </div>
    )}

    {/* Out Button for Walks - Top Center (only show for walks) */}
    {!existingAtBat && !isOut && isWalk && (
      <div className="absolute top-4 left-1/2 transform -translate-x-1/2">
        <button
          onClick={() => {
            setShowFieldSelection(true)
            setSelectedFieldArea('OUT')
            setIsOut(true) // Mark as out when Out button is clicked
          }}
          className="bg-red-600 text-white px-4 py-2 rounded-lg text-xs font-bold hover:bg-red-700 active:bg-red-800 shadow-lg"
        >
          Out
        </button>
      </div>
    )}
    
    {/* Show locked notation for existing at-bats */}
    {existingAtBat && (
      <div className="absolute top-4 left-1/2 transform -translate-x-1/2">
        <div className="bg-gray-100 text-gray-700 px-6 py-3 rounded-lg text-sm font-bold border-2 border-gray-300">
          Play: {handwritingInput} (Locked)
        </div>
      </div>
    )}

            {/* Count Buttons - Top Left (only show for new at-bats, not scored, and not out) */}
            {!existingAtBat && !runScored && !isOut && !isWalk && (
              <div className="absolute top-20 left-4 flex flex-col space-y-6">
                <button
                  onClick={addStrike}
                  className="bg-red-500 text-white px-3 py-2 rounded-lg text-xs font-bold hover:bg-red-600 active:bg-red-700 shadow-lg"
                >
                  Strike
                </button>
                <button
                  onClick={addBall}
                  className="bg-blue-500 text-white px-3 py-2 rounded-lg text-xs font-bold hover:bg-blue-600 active:bg-blue-700 shadow-lg"
                >
                  Bola
                </button>
                <button
                  onClick={addFoul}
                  className="bg-yellow-500 text-white px-3 py-2 rounded-lg text-xs font-bold hover:bg-yellow-600 active:bg-yellow-700 shadow-lg"
                >
                  Foul
                </button>
              </div>
            )}
            
            {/* Show locked count for existing at-bats, scored runs, or outs */}
            {(existingAtBat || runScored || isOut) && (
              <div className="absolute top-20 left-4 flex flex-col space-y-6">
                <div className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg text-xs font-bold border-2 border-gray-300">
                  Strike: {count.strikes}
                </div>
                <div className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg text-xs font-bold border-2 border-gray-300">
                  Bola: {count.balls}
                </div>
                <div className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg text-xs font-bold border-2 border-gray-300">
                  Foul: {count.fouls}
                </div>
              </div>
            )}

            {/* Show locked count for walks */}
            {isWalk && !existingAtBat && !runScored && !isOut && (
              <div className="absolute top-20 left-4 flex flex-col space-y-6">
                <div className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg text-xs font-bold border-2 border-gray-300">
                  Strike: {count.strikes}
                </div>
                <div className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg text-xs font-bold border-2 border-gray-300">
                  Bola: {count.balls}
                </div>
                <div className="bg-gray-100 text-gray-700 px-3 py-2 rounded-lg text-xs font-bold border-2 border-gray-300">
                  Foul: {count.fouls}
                </div>
              </div>
            )}
            
            {/* Reset Button - Bottom Left (only show for new at-bats, not out, and not walk) */}
            {!existingAtBat && !isOut && !isWalk && (
              <div className="absolute bottom-4 left-4">
                <button
                  onClick={resetCount}
                  className="bg-gray-500 text-white px-3 py-1.5 rounded-lg text-xs font-bold hover:bg-gray-600 active:bg-gray-700 shadow-lg"
                >
                  Reiniciar Cuenta
                </button>
              </div>
            )}

            {/* Base Runner Out Button - Bottom Center (only show if there are base runners and not out) */}
            {!isOut && (baseRunners.first || baseRunners.second || baseRunners.third || baseRunners.home) && (
              <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
                <button
                  onClick={() => {
                    console.log('=== MARK OUT CLICKED ===')
                    console.log('selectedBase:', selectedBase)
                    console.log('baseRunners:', baseRunners)
                    console.log('=======================')
                    if (selectedBase) {
                      setShowOutTypeModal(true)
                    } else {
                      alert('Por favor selecciona una base primero haciendo clic en ella')
                    }
                  }}
                  className="bg-red-600 text-white px-3 py-1.5 rounded-lg text-xs font-bold hover:bg-red-700 active:bg-red-800 shadow-lg"
                >
                  Marcar Out
                </button>
              </div>
            )}

            {/* Carrera Button - Bottom Right (available for all at-bats except outs) */}
            {!isOut && (
              <div className="absolute bottom-4 right-4">
              <button
                onClick={() => {
                  console.log('=== CARRERA CLICKED ===')
                  console.log('Clearing all base runners - Run scored!')
                  console.log('=======================')
                  setSelectedBase(null)
                  setBaseRunners({ first: false, second: false, third: false, home: false })
                  setRunScored(true) // Set run scored to fill diamond with blue
                }}
                className="bg-green-600 text-white px-3 py-1.5 rounded-lg text-xs font-bold hover:bg-green-700 active:bg-green-800 shadow-lg"
              >
                Carrera
              </button>
              </div>
            )}
          </div>
        </div>

        {/* Out Type Selection Modal */}
        {showOutTypeModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60">
            <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
              <h3 className="text-xl font-bold mb-4 text-center">
                How was the runner out?
              </h3>
              <p className="text-sm text-gray-600 mb-4 text-center">
                Selected base: {selectedBase}
              </p>
              
              <div className="space-y-3">
                <button
                  onClick={() => {
                    setSelectedOutType('TAGGED_OUT')
                    setBaseRunnerOuts(prev => ({
                      ...prev,
                      [selectedBase!]: true
                    }))
                    setBaseRunnerOutTypes(prev => ({
                      ...prev,
                      [selectedBase!]: 'TAGGED_OUT'
                    }))
                    setShowOutTypeModal(false)
                  }}
                  className="w-full bg-red-600 text-white px-6 py-3 rounded-lg text-sm font-bold hover:bg-red-700 active:bg-red-800 shadow-lg"
                >
                  Tagged Out
                </button>
                
                <button
                  onClick={() => {
                    setSelectedOutType('CAUGHT_STEALING')
                    setBaseRunnerOuts(prev => ({
                      ...prev,
                      [selectedBase!]: true
                    }))
                    setBaseRunnerOutTypes(prev => ({
                      ...prev,
                      [selectedBase!]: 'CAUGHT_STEALING'
                    }))
                    setShowOutTypeModal(false)
                  }}
                  className="w-full bg-red-600 text-white px-6 py-3 rounded-lg text-sm font-bold hover:bg-red-700 active:bg-red-800 shadow-lg"
                >
                  Caught Stealing
                </button>
                
                <button
                  onClick={() => {
                    setSelectedOutType('FORCE_OUT')
                    setBaseRunnerOuts(prev => ({
                      ...prev,
                      [selectedBase!]: true
                    }))
                    setBaseRunnerOutTypes(prev => ({
                      ...prev,
                      [selectedBase!]: 'FORCE_OUT'
                    }))
                    setShowOutTypeModal(false)
                  }}
                  className="w-full bg-red-600 text-white px-6 py-3 rounded-lg text-sm font-bold hover:bg-red-700 active:bg-red-800 shadow-lg"
                >
                  Force Out
                </button>
                
                <button
                  onClick={() => setShowOutTypeModal(false)}
                  className="w-full bg-gray-500 text-white px-6 py-3 rounded-lg text-sm font-bold hover:bg-gray-600 active:bg-gray-700 shadow-lg"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Field Selection Modal */}
        {showFieldSelection && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60">
            <div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4">
              <h3 className="text-xl font-bold mb-4 text-center">
                Click where the ball landed on the field
              </h3>
              
              {/* Canvas Field Selection - Same as main field */}
              <div className="flex justify-center">
                <canvas
                  ref={canvasRef}
                  width={600}
                  height={600}
                  className="border border-gray-300 rounded-lg bg-white cursor-pointer max-w-full max-h-full object-contain"
                  onClick={handleFieldClick}
                />
              </div>
              
              <p className="text-sm text-gray-600 mt-4 text-center">
                Click on any area of the field to select where the ball landed
              </p>
              
              <div className="mt-4 flex justify-center">
                <button
                  onClick={() => setShowFieldSelection(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Outcome Selection Modal */}
                      style={{
                        clipPath: 'polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%)'
                      }}
                      onClick={() => handleFieldClick('INFIELD')}
                      title="Infield"
                    >
                      {/* Diamond outline */}
                      <div className="absolute inset-0 border-2 border-gray-600"></div>
                      
                      {/* Base paths - SVG for diamond shape */}
                      <svg className="absolute inset-0 w-full h-full" style={{ zIndex: 11 }}>
                        {/* Home to First Base (bottom to right) */}
                        <line
                          x1="50%"
                          y1="100%"
                          x2="100%"
                          y2="50%"
                          stroke="#374151"
                          strokeWidth="2"
                        />
                        
                        {/* First to Second Base (right to top) */}
                        <line
                          x1="100%"
                          y1="50%"
                          x2="50%"
                          y2="0%"
                          stroke="#374151"
                          strokeWidth="2"
                        />
                        
                        {/* Second to Third Base (top to left) */}
                        <line
                          x1="50%"
                          y1="0%"
                          x2="0%"
                          y2="50%"
                          stroke="#374151"
                          strokeWidth="2"
                        />
                        
                        {/* Third to Home Base (left to bottom) */}
                        <line
                          x1="0%"
                          y1="50%"
                          x2="50%"
                          y2="100%"
                          stroke="#374151"
                          strokeWidth="2"
                        />
                      </svg>
                      
                      {/* Large, Clear Bases positioned at diamond corners */}
                      {/* Home Plate (bottom point) */}
                      <div 
                        className="absolute bg-white border-4 border-black shadow-lg"
                        style={{
                          left: '50%',
                          bottom: '0%',
                          width: '24px',
                          height: '24px',
                          transform: 'translate(-50%, 50%)',
                          zIndex: 20
                        }}
                      ></div>
                      
                      {/* First Base (right point) */}
                      <div 
                        className="absolute bg-white border-4 border-black shadow-lg"
                        style={{
                          right: '0%',
                          top: '50%',
                          width: '24px',
                          height: '24px',
                          transform: 'translate(50%, -50%)',
                          zIndex: 20
                        }}
                      ></div>
                      
                      {/* Second Base (top point) */}
                      <div 
                        className="absolute bg-white border-4 border-black shadow-lg"
                        style={{
                          left: '50%',
                          top: '0%',
                          width: '24px',
                          height: '24px',
                          transform: 'translate(-50%, -50%)',
                          zIndex: 20
                        }}
                      ></div>
                      
                      {/* Third Base (left point) */}
                      <div 
                        className="absolute bg-white border-4 border-black shadow-lg"
                        style={{
                          left: '0%',
                          top: '50%',
                          width: '24px',
                          height: '24px',
                          transform: 'translate(-50%, -50%)',
                          zIndex: 20
                        }}
                      ></div>
                      
                      {/* Pitcher's Mound */}
                      <div 
                        className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-orange-300 rounded-full border border-gray-600"
                        style={{ zIndex: 11 }}
                      ></div>
                    </div>
                  </div>
                </div>
                
                {/* Ultra-Precise Outfield Mapping */}
                <div className="absolute inset-0">
                  {/* Left Field - 1000 precise clickable areas */}
                  <div className="absolute top-0 left-0 w-1/3 h-1/2">
                    {Array.from({ length: 50 }, (_, row) => 
                      Array.from({ length: 20 }, (_, col) => {
                        const x = (col / 20) * 100
                        const y = (row / 50) * 100
                        const area = getLeftFieldArea(x, y)
                        
                        return (
                          <div
                            key={`left-${row}-${col}`}
                            className="absolute cursor-pointer hover:bg-green-400 hover:bg-opacity-50 transition-colors"
                            style={{
                              left: `${x}%`,
                              top: `${y}%`,
                              width: '5%',
                              height: '2%'
                            }}
                            onClick={() => handleFieldClick(area)}
                            title={area}
                          />
                        )
                      })
                    )}
                  </div>
                  
                  {/* Center Field - 1000 precise clickable areas */}
                  <div className="absolute top-0 left-1/3 w-1/3 h-1/2">
                    {Array.from({ length: 50 }, (_, row) => 
                      Array.from({ length: 20 }, (_, col) => {
                        const x = (col / 20) * 100
                        const y = (row / 50) * 100
                        const area = getCenterFieldArea(x, y)
                        
                        return (
                          <div
                            key={`center-${row}-${col}`}
                            className="absolute cursor-pointer hover:bg-green-400 hover:bg-opacity-50 transition-colors"
                            style={{
                              left: `${x}%`,
                              top: `${y}%`,
                              width: '5%',
                              height: '2%'
                            }}
                            onClick={() => handleFieldClick(area)}
                            title={area}
                          />
                        )
                      })
                    )}
                  </div>
                  
                  {/* Right Field - 1000 precise clickable areas */}
                  <div className="absolute top-0 right-0 w-1/3 h-1/2">
                    {Array.from({ length: 50 }, (_, row) => 
                      Array.from({ length: 20 }, (_, col) => {
                        const x = (col / 20) * 100
                        const y = (row / 50) * 100
                        const area = getRightFieldArea(x, y)
                        
                        return (
                          <div
                            key={`right-${row}-${col}`}
                            className="absolute cursor-pointer hover:bg-green-400 hover:bg-opacity-50 transition-colors"
                            style={{
                              left: `${x}%`,
                              top: `${y}%`,
                              width: '5%',
                              height: '2%'
                            }}
                            onClick={() => handleFieldClick(area)}
                            title={area}
                          />
                        )
                      })
                    )}
                  </div>
                </div>
                
                {/* Foul Territory */}
                <div 
                  className="absolute bottom-0 left-0 w-1/2 h-1/2 cursor-pointer hover:bg-gray-300 hover:bg-opacity-30 transition-colors"
                  onClick={() => handleFieldClick('FOUL_LEFT')}
                  title="Foul Territory (Left)"
                ></div>
                
                <div 
                  className="absolute bottom-0 right-0 w-1/2 h-1/2 cursor-pointer hover:bg-gray-300 hover:bg-opacity-30 transition-colors"
                  onClick={() => handleFieldClick('FOUL_RIGHT')}
                  title="Foul Territory (Right)"
                ></div>
              </div>
              
              <div className="mt-4 flex justify-center">
                <button
                  onClick={() => setShowFieldSelection(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Outcome Selection Modal */}
        {showOutcomeSelection && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-60">
            <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4">
              <h3 className="text-xl font-bold mb-2 text-center">
                Select the outcome
              </h3>
              <p className="text-sm text-gray-600 mb-4 text-center">
                Field area: {selectedFieldArea?.replace('HIT_', '').replace('OUT_', '')}
              </p>
              
              {selectedFieldArea?.includes('HIT') ? (
                <div className="space-y-3">
                  <h4 className="font-semibold text-green-600">Hit Options:</h4>
                  
                  {/* Infield hits */}
                  {selectedFieldArea.includes('INFIELD') && (
                    <>
                      <button
                        onClick={() => {
                          setHandwritingInput('BUNT')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-blue-100 border-2 border-blue-600 rounded-lg hover:bg-blue-200 font-semibold"
                      >
                        BUNT - Bunt Single
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('H1')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-green-100 border-2 border-green-600 rounded-lg hover:bg-green-200 font-semibold"
                      >
                        HIT DE INFIELD - Single de Infield
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('E')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-yellow-100 border-2 border-yellow-600 rounded-lg hover:bg-yellow-200 font-semibold"
                      >
                        ERROR - Fielding Error
                      </button>
                    </>
                  )}
                  
                  {/* Outfield hits */}
                  {(selectedFieldArea.includes('LEFT_FIELD') || selectedFieldArea.includes('CENTER_FIELD') || selectedFieldArea.includes('RIGHT_FIELD') || selectedFieldArea.includes('DEEP_')) && (
                    <>
                      <button
                        onClick={() => {
                          setHandwritingInput('H1')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-green-100 border-2 border-green-600 rounded-lg hover:bg-green-200 font-semibold"
                      >
                        H1 - Single
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('H2')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-green-100 border-2 border-green-600 rounded-lg hover:bg-green-200 font-semibold"
                      >
                        H2 - Doble
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('H3')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-green-100 border-2 border-green-600 rounded-lg hover:bg-green-200 font-semibold"
                      >
                        H3 - Triple
                      </button>
                    </>
                  )}
                  
                      <button
                        onClick={() => {
                          setHandwritingInput('HR')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-green-100 border-2 border-green-600 rounded-lg hover:bg-green-200 font-semibold"
                      >
                        HR - Jonrón
                      </button>
                </div>
              ) : (
                <div className="space-y-3">
                  <h4 className="font-semibold text-red-600">Opciones de Out:</h4>
                  
                  {/* Infield outs */}
                  {selectedFieldArea.includes('INFIELD') && (
                    <>
                      <button
                        onClick={() => {
                          setHandwritingInput('BUNT_OUT')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-red-100 border-2 border-red-600 rounded-lg hover:bg-red-200 font-semibold"
                      >
                        BUNT OUT - Bunt Out
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('GO')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-red-100 border-2 border-red-600 rounded-lg hover:bg-red-200 font-semibold"
                      >
                        OUT DE INFIELD - Out por Tierra
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('E')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-yellow-100 border-2 border-yellow-600 rounded-lg hover:bg-yellow-200 font-semibold"
                      >
                        ERROR - Fielding Error
                      </button>
                    </>
                  )}
                  
                  {/* Outfield outs */}
                  {(selectedFieldArea.includes('LEFT_FIELD') || selectedFieldArea.includes('CENTER_FIELD') || selectedFieldArea.includes('RIGHT_FIELD') || selectedFieldArea.includes('DEEP_')) && (
                    <>
                      <button
                        onClick={() => {
                          setHandwritingInput('FO')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-red-100 border-2 border-red-600 rounded-lg hover:bg-red-200 font-semibold"
                      >
                        Fly Out
                      </button>
                      <button
                        onClick={() => {
                          setHandwritingInput('LO')
                          setShowOutcomeSelection(false)
                        }}
                        className="w-full p-3 bg-red-100 border-2 border-red-600 rounded-lg hover:bg-red-200 font-semibold"
                      >
                        Line Out
                      </button>
                    </>
                  )}
                  
                  {/* Foul territory */}
                  {selectedFieldArea.includes('FOUL') && (
                    <button
                      onClick={() => {
                        setHandwritingInput('FOUL')
                        setShowOutcomeSelection(false)
                      }}
                      className="w-full p-3 bg-red-100 border-2 border-red-600 rounded-lg hover:bg-red-200 font-semibold"
                    >
                      Foul Ball
                    </button>
                  )}
                  
                  <button
                    onClick={() => {
                      setHandwritingInput('K')
                      setShowOutcomeSelection(false)
                    }}
                    className="w-full p-3 bg-red-100 border-2 border-red-600 rounded-lg hover:bg-red-200 font-semibold"
                  >
                    Ponche
                  </button>
                </div>
              )}
              
              <div className="mt-4 flex justify-center">
                <button
                  onClick={() => setShowOutcomeSelection(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Notation Input */}
        <div className="p-2 sm:p-3 bg-gray-100 border-t border-gray-200">
          <div className="text-xs sm:text-sm text-gray-700 mb-1 font-semibold">
            Notación de Jugada: {existingAtBat ? '(Bloqueado - No se puede editar)' : ''}
          </div>
          <input
            type="text"
            value={handwritingInput}
            onChange={(e) => setHandwritingInput(e.target.value)}
            placeholder={existingAtBat ? "La notación está bloqueada para turnos al bat existentes" : "Ingresa notación: K, BB, 1B, 2B, 3B, HR, 6-3, etc."}
            disabled={!!existingAtBat}
            className={`w-full px-2 py-1 border border-gray-300 rounded text-xs sm:text-sm ${
              existingAtBat ? 'bg-gray-200 text-gray-500 cursor-not-allowed' : ''
            }`}
          />
        </div>

        {/* Play Notation Instructions */}
        <div className="p-2 sm:p-3 bg-gray-100 border-t border-gray-200">
            <div className="text-xs sm:text-sm text-gray-600">
              <div>• Toca las bases para seleccionar la posición del corredor</div>
              <div>• Usa los botones para seleccionar el resultado del turno al bat</div>
            </div>
        </div>

        {/* Action Buttons */}
        <div className="p-2 sm:p-4 border-t border-gray-200 flex flex-col sm:flex-row justify-between gap-3 sm:gap-0">
          <button
            onClick={clearCanvas}
            className="px-2 py-1.5 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 text-xs sm:text-sm w-full sm:w-auto"
          >
            Limpiar
          </button>
          <div className="flex flex-col sm:flex-row justify-end gap-3 sm:gap-4">
            <button
              onClick={onClose}
              className="px-2 py-1.5 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 text-xs sm:text-sm w-full sm:w-auto"
            >
              Cancelar
            </button>
            <button
              onClick={saveDrawing}
              className="px-2 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-xs sm:text-sm w-full sm:w-auto"
            >
              Guardar Turno al Bat
            </button>
          </div>
        </div>
      </div>

      {/* Strikeout Confirmation Dialog */}
      {showStrikeoutConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold mb-4 text-center">
              ¿Ponche?
            </h3>
            <p className="text-sm text-gray-600 mb-6 text-center">
              Se han registrado 3 strikes. ¿Confirmar el ponche?
            </p>
            <div className="flex justify-center space-x-4">
              <button
                onClick={confirmStrikeout}
                className="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700"
              >
                Sí
              </button>
              <button
                onClick={cancelStrikeout}
                className="bg-gray-600 text-white px-6 py-2 rounded-lg hover:bg-gray-700"
              >
                No
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Walk Confirmation Dialog */}
      {showWalkConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-70">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold mb-4 text-center">
              ¿Bases por Bola?
            </h3>
            <p className="text-sm text-gray-600 mb-6 text-center">
              Se han registrado 4 bolas. ¿Confirmar las bases por bola?
            </p>
            <div className="flex justify-center space-x-4">
              <button
                onClick={confirmWalk}
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700"
              >
                Sí
              </button>
              <button
                onClick={cancelWalk}
                className="bg-gray-600 text-white px-6 py-2 rounded-lg hover:bg-gray-700"
              >
                No
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
